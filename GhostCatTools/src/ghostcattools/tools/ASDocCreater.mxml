<?xml version="1.0" encoding="utf-8"?>
<components:GCToolWindow xmlns:fx="http://ns.adobe.com/mxml/2009" showStatusBar="false"
						 xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="gctoolwindow1_creationCompleteHandler(event)" close="gctoolwindow1_closeHandler(event)" 
						 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="ghostcattools.components.*" width="400" height="224" enabledDragOpen="false">
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import ghostcat.util.data.LocalStorage;
			
			import ghostcattools.components.GCAlert;
			import ghostcattools.components.TraceTitleWindow;
			import ghostcattools.util.AutoLengthArrayList;
			import ghostcattools.util.Config;
			import ghostcattools.util.FileControl;
			import ghostcattools.util.ValueObject;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectProxy;
			import mx.validators.ValidationResult;
			
			import spark.components.TextArea;
			import spark.components.TitleWindow;
			import spark.events.TextOperationEvent;
			
			[Bindable]
			public var libs:AutoLengthArrayList = new AutoLengthArrayList(null,ValueObject,"value");

			public var so:LocalStorage = new LocalStorage("gctools_asdoccreater");
			
			private var outputTitleWindow:TraceTitleWindow;
			
			public function getShareObjectUrl():String
			{
				var text:String = sourceText.text;
				text = text.replace(/\W/g,"");
				return "gctools_asdoccreater_" + text;
			}
			protected function gctoolwindow1_creationCompleteHandler(event:FlexEvent):void
			{
				FileControl.dragFileIn(openFileHandler,inBN,["bat"]);
				if (!isDragOpen)
				{
					var source:String = so.getValue();
					if (source)
					{
						sourceText.text = source;
						sourceText.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE));
					}
				}
			}

			protected function gctoolwindow1_closeHandler(event:Event):void
			{
				saveToShareObject();
			}
			
			private function saveToShareObject():void
			{
				if (!sourceText.text)
					return;
				
				this.so.setValue(sourceText.text);
				
				var obj:Object = {};
				obj.target = targetText.text;
				
				if (libs.length > 1)
				{
					var list:Array = []; 
					for each (var child:ValueObject in libs.toArray())
						list.push(child.value);
				}
				obj.libs = list;
				
				new LocalStorage(getShareObjectUrl()).setValue(obj);
			}

			protected function sourceText_changeHandler(event:TextOperationEvent):void
			{
				var obj:Object = new LocalStorage(getShareObjectUrl()).getValue();
				if (obj)
				{
					if (!targetText.text)
						targetText.text = obj.target;
					
					if (libs.length <= 1 && obj.libs)
					{
						this.libs.removeAll();
						for each (var child:String in obj.libs)
							this.libs.addItem(new ValueObject(child));
					}
				}
			}
			
			protected function createRunParams():Array
			{
				var reg:Array = [];
				reg.push("-source-path+=" + sourceText.text);
				reg.push("-doc-sources+=" + sourceText.text);
				for (var i:int = 0;i < libs.length - 1;i++)
				{
					var obj:String = ValueObject(libs.getItemAt(i)).value.toString();
					if (obj)
						reg.push("-library-path+=" + obj)
				}
				return reg;
			}
			
			protected function runBN_clickHandler(event:MouseEvent):void
			{
				saveToShareObject();
				
				var file:File = new File(Config.FLEXSDK_PATH + "\\" + Config.ASDOC);
				if (!file.exists)
					return;
				
				var workingDirectory:File = new File(targetText.text); 
				FileControl.run(file,createRunParams(),runEndHandler,dataHandler,errorHandler, workingDirectory);
			
				this.outputTitleWindow = new TraceTitleWindow();
				this.outputTitleWindow.title = "正在生成ASDoc文档"
				this.outputTitleWindow.width = 380;
				this.outputTitleWindow.height = 200;
				this.outputTitleWindow.enabledCloseButton = false;
				this.outputTitleWindow.show(this,true);
			
				function runEndHandler(event:Event):void
				{
					FileControl.openExplorer(workingDirectory.nativePath);
					outputTitleWindow.enabledCloseButton = true;
				}
				
				function dataHandler(str:String):void
				{
					outputTitleWindow.traceExt(str);
				}
				
				function errorHandler(str:String):void
				{
					outputTitleWindow.traceExt(str,0xFF0000);
				}
			}
			
			public override function openFileHandler(files:Array):void
			{
				if (!files)
					return;
				
				var file:File = files[0] as File;
				var bytes:ByteArray = FileControl.readFile(file);
				var str:String = bytes.toString();
				var result:Array = str.match(/(?<=cd ).*?$/m);
				this.targetText.text = result ? result[0] : "";
				result = str.match(/(?<=-source-path\+=).*?(?= -|$)/g);
				this.sourceText.text = result ? result[0] : "";
				result = str.match(/(?<=-library-path\+=).*?(?= -|$)/g);
				
				this.libs.removeAll();
				for each (var child:String in result)
					this.libs.addItem(new ValueObject(child));
			}
			
			private function saveFileHandler(files:Array):void
			{
				if (!files)
					return;
				
				var file:File = files[0] as File;
				var str:String = "cd " + targetText.text + "\r\n" + new File(Config.FLEXSDK_PATH + "\\" + Config.ASDOC).nativePath + " " + createRunParams().join(" ");
				var bytes:ByteArray = new ByteArray();
				bytes.writeUTFBytes(str);
				FileControl.writeFile(file,bytes);
				FileControl.openExplorer(file.parent.nativePath);
			}
			

			protected function outBN_clickHandler(event:MouseEvent):void
			{
				FileControl.browseForSave(saveFileHandler,"保存为BAT","asdoc.bat");
			}


			protected function inBN_clickHandler(event:MouseEvent):void
			{
				FileControl.browseForOpen(openFileHandler,"选择一个BAT文件",[new FileFilter("BAT 文件","*.bat")])
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Label x="10" y="15" text="项目地址："/>
	<s:TextInput id="sourceText" x="76" y="10" width="265" change="sourceText_changeHandler(event)"/>
	<components:BrowseButton id="sdkSelectBN" x="347" y="10" target="{sourceText}" isDirectory="true" browseTitle="选择一个目录"/>
	<s:Label x="10" y="45" text="生成位置："/>
	<s:TextInput id="targetText" x="76" y="40" width="265"/>
	<components:BrowseButton id="sdkSelectBN0" x="347" y="40" target="{targetText}" isDirectory="true" browseTitle="选择一个目录"/>
	<s:Label x="10" y="79" text="相关类库："/>
	<s:Scroller x="73" y="70" width="320" height="90">
		<s:DataGroup dataProvider="{libs}">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:DataRenderer width="300">
						<fx:Script>
							<![CDATA[
								import ghostcattools.util.ValueObject;
							]]>
						</fx:Script>
						<s:TextInput id="libInput" y="3" x="3" width="265" text="@{data.value}"/>
						<components:BrowseButton y="3" x="274" target="{libInput}" browseTitle="选择一个SWC文件" 
												 browseExtension="{new FileFilter('SWC 文件','*.swc')}" dragExtension="swc"/>
					</s:DataRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:DataGroup>	
	</s:Scroller>
	<s:Button id="runBN" x="75" y="165" enabled="{!(!sourceText.text || !targetText.text)}" width="216" height="53" label="生成"  click="runBN_clickHandler(event)"/>
	<s:Button id="outBN" x="296" y="193" enabled="{!(!sourceText.text || !targetText.text)}" width="74" height="24" label="导出BAT" click="outBN_clickHandler(event)" />
	<s:Button id="inBN" x="296" y="165" width="74" height="24" label="导入BAT" click="inBN_clickHandler(event)" />
</components:GCToolWindow>
