<?xml version="1.0" encoding="utf-8"?>
<components:GCToolWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						 xmlns:s="library://ns.adobe.com/flex/spark" isDirectory="true" showStatusBar="false" title="代码统计"
						 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="ghostcattools.components.*" width="629" height="394">

	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import ghostcat.util.core.Asyn;
			
			import ghostcattools.util.FileControl;
			
			import mx.collections.ArrayCollection;
			import mx.effects.easing.Elastic;
			import mx.events.EffectEvent;
			import mx.utils.StringUtil;
			
			import spark.components.TextArea;
			
			private const extensions:Array = ["as","mxml"];
			
			[Bindable]
			public var fileList:Array;
			
			[Bindable]
			public var totalCodeLength:int;
			
			[Bindable]
			public var totalFileLength:int;
			
			private var fileLengthList:Array;//每个文件长度分布数组
			private var directoryListerNum:int = 0;//正在等待查询目录返回的事件数量
			
			private function directoryListingHandler(event:FileListEvent):void
			{
				var list:Array = event.files;
				File(event.currentTarget).removeEventListener(FileListEvent.DIRECTORY_LISTING,directoryListingHandler);
				
				for each (var child:File in list)
					this.searchFileAndAdd(child);
				
				directoryListerNum--;
				if (directoryListerNum == 0)
				{
					Asyn.autoSetInv(stage);
					Asyn.asynFor(readFileHandler,0,this.fileList.length,readFileCompleteHandler);
				}
			}
			
			private function searchFileAndAdd(file:File):void
			{
				if (!file.isHidden)
				{
					if (file.isDirectory)
					{
						directoryListerNum++;
						file.getDirectoryListingAsync();
						file.addEventListener(FileListEvent.DIRECTORY_LISTING,directoryListingHandler);
					}
					else
					{
						if (extensions.indexOf(file.extension) != -1)
							fileList.push(file);
					}
				}
			}
			
			public override function openFileHandler(files:Array):void
			{
				var file:File = files[0] as File;
				
				this.progressBar.label = file.nativePath;
				
				this.fileList = [];
				this.fileLengthList = [];
				
				this.progressBar.setProgress(0,this.fileList.length);
				this.refreshChartData();
				
				pieSeries2.setStyle("showDataEffect",null);
				
				setTimeout(searchFileAndAdd,0,file);
			}
			
			private function readFileHandler(i:int):void
			{
				var file:File = this.fileList[i] as File;
				var bytes:ByteArray = FileControl.readFile(file);
				var text:String = bytes.toString();
				var list:Array = text.split("\n");
				
				var v1:int = 0;
				var v2:int = 0;
				var v3:int = 0;
				var v4:int = 0;
				for each (var str:String in list)
				{
					if (new RegExp("^\\s*(//|/\\*|\\*)","m").test(str))
					{
						v4++;
					}
					else
					{
						var short:String = StringUtil.trim(str);
						if (short.length == 0)
							v3++;
						else if (short.length == 1)
							v2++;
						else
							v1++;
					}
				}
				
				this.totalCodeLength += list.length;
				this.fileLengthList.push([v1,v2,v3,v4]);
				
				this.refreshChartData();
				
				this.progressBar.setProgress(i,this.fileList.length);
			}
			
			private function readFileCompleteHandler():void
			{
				var v:int = this.fileList.length ? this.fileList.length : 1;
				progressBar.setProgress(v,v);
				
				setTimeout(sysleHandler,100);
				function sysleHandler():void
				{
					pieSeries2.setStyle("showDataEffect",seriesEffect);
				}
			}
			
			private function refreshChartData():void
			{
				var total:int;
				var result1:Array = [0,0,0,0];
				var result2:Array = [0,0,0,0];
				for each (var file:Array in this.fileLengthList)
				{
					for (var i:int = 0;i < file.length;i++)
					{
						result1[i] += file[i];
						total += file[i];
					}
					
					var fileLen:int = 0;
					if (filterBox1.selected)
						fileLen+= file[0];
					if (filterBox2.selected)
						fileLen+= file[1];
					if (filterBox3.selected)
						fileLen+= file[2];
					if (filterBox4.selected)
						fileLen+= file[3];
					
					if (fileLen < 100)
						result2[0]++;
					else if (fileLen < 500)
						result2[1]++;
					else if (fileLen < 2000)
						result2[2]++;
					else
						result2[3]++;
				}
				this.totalCodeLength = total;
				this.totalFileLength = this.fileLengthList.length;
				
				for (i = 0;i < 4;i++)
				{
					chartDataGroup1.getItemAt(i).value = result1[i]; 
					chartDataGroup2.getItemAt(i).value = result2[i]; 
				}
				
				this.chartDataGroup1.refresh();
				this.chartDataGroup2.refresh();
			}
			
			private function pieSeriesLabelFunction(item:Object, field:String, index:Number, percentValue:Number):String
			{ 
				return item.name + ":" + item.value + "\n(占全部的" + percentValue.toFixed(2) + "%)"; 
			} 
			
			protected function openBN_clickHandler(event:MouseEvent):void
			{
				FileControl.browseForDirectory(openFileHandler,"选择一个目录");
			}
		
			protected function filterBox_changeHandler(event:Event):void
			{
				refreshChartData();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ArrayCollection id="chartDataGroup1">
			<fx:Object name="有效行数量"/>
			<fx:Object name="单字符行数量"/>
			<fx:Object name="空白行数量"/>
			<fx:Object name="注释行数量"/>
		</s:ArrayCollection>
		<s:ArrayCollection id="chartDataGroup2">
			<fx:Object name="100行以下"/>
			<fx:Object name="100至500行"/>
			<fx:Object name="500至2000行"/>
			<fx:Object name="2000行以上"/>
		</s:ArrayCollection>
		<mx:SeriesInterpolate id="seriesEffect"/>
	</fx:Declarations>

	<s:Label id="urlText" x="84" y="10" width="269" text="点击“浏览”按钮或者拖动文件到此窗口" visible="{!fileList}"/>
	<mx:ProgressBar id="progressBar" visible="{fileList}" label="" y="7" left="80" right="5"
					labelPlacement="center" mode="manual"/>
	<s:Button id="openBN" x="5" y="5" label="浏览" click="openBN_clickHandler(event)"/>
	<mx:TabNavigator left="5" right="5" top="30" bottom="5" paddingTop="0" creationPolicy="all">
		<s:NavigatorContent width="100%" height="100%" label="统计行">
			<s:Label y="6" horizontalCenter="0" text="代码总行数：{totalCodeLength}" textAlign="center" visible="{fileList}"/>
			<mx:PieChart left="0" right="0" top="20" bottom="0" dataProvider="{chartDataGroup1}">
				<mx:series>
					<components:BevelPieSeries field="value" nameField="name" labelFunction="pieSeriesLabelFunction"/>
				</mx:series>
			</mx:PieChart>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="统计文件">
			<s:Label y="6" horizontalCenter="0" text="文件数量：{totalFileLength}" textAlign="center" visible="{fileList}"/>
			<mx:PieChart left="79" right="0" top="20" bottom="0" dataProvider="{chartDataGroup2}">
				<mx:series>
					<components:BevelPieSeries id="pieSeries2" field="value" nameField="name" labelFunction="pieSeriesLabelFunction"/>
				</mx:series>
			</mx:PieChart>
			<s:VGroup x="5" y="6" visible="{fileList}">
				<s:CheckBox id="filterBox1" label="有效行" selected="true" change="filterBox_changeHandler(event)"/>
				<s:CheckBox id="filterBox2" label="单字符行" selected="true" change="filterBox_changeHandler(event)"/>
				<s:CheckBox id="filterBox3" label="空白行" selected="true" change="filterBox_changeHandler(event)"/>
				<s:CheckBox id="filterBox4" label="注释行" selected="true" change="filterBox_changeHandler(event)"/>
			</s:VGroup>
		</s:NavigatorContent>
	</mx:TabNavigator>
</components:GCToolWindow>
