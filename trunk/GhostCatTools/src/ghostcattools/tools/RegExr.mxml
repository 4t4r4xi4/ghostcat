<?xml version="1.0" encoding="utf-8"?>
<components:GCToolWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:components="ghostcattools.components.*"
						 width="620" height="488" minWidth="600" minHeight="350"
						 currentState="match" showStatusBar="false" title="正则工具" 
						 creationComplete="gctoolwindow1_creationCompleteHandler(event)" close="gctoolwindow1_closeHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.utils.getQualifiedClassName;
			import flash.utils.setTimeout;
			
			import flashx.textLayout.events.FlowElementMouseEvent;
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import ghostcat.ui.controls.GText;
			import ghostcat.util.data.LocalStorage;
			
			import ghostcattools.util.FileControl;
			import ghostcattools.util.TextControl;
			
			import mx.controls.Button;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.utils.TextFlowUtil;
			
			public var sharedObject:LocalStorage = new LocalStorage("gctools_regexr");
			
			[Bindable]
			public var helpDatas:ArrayList = new ArrayList([
				". 任意字符",
				"\\w 字母",
				"\\s 空白符号",
				"\\d 数字",
				"\\b 单词边界",
				"\\W 非字母",
				"\\S 非空白符号",
				"\\D 非数字",
				"\\B 非单词边界",
				"\\t 制表符",
				"\\r 回车",
				"\\n 换行",
				"\\xnn ASCII 16进制",
				"\\unnnn Unicode",
				"[a-c] 字符范围",
				"[^x] 非字符x",
				"[\\x00-\\xff] 半角",
				"[\\u4e00-\\u9fa5] 中文",
				"| 分支",
				"^ 行首",
				"$ 行尾",
				"\\A 字符串开头",
				"\\Z 字符串结尾",
				"* 重复零或更多次",
				"+ 重复一或更多次",
				"? 重复零或一次",
				"{n} 重复n次",
				"{n,} 重复n获更多次",
				"{n,m} 重复n到m次",
				"(exp)	捕获至组",
				"(?<a>exp) 捕获至组a",
				"(?:exp) 跳过组",
				"\\num	匹配组",
				"(?=exp) 后方匹配",
				"(?<=exp) 前方匹配",
				"(?!=exp) 后方不匹配",
				"(?<!=exp) 前方不匹配",
				"(?#comment) 注释",
				"$$ 替换一个$",
				"$& 替换匹配的字符",
				"$` 替换之前的字符",
				"$' 替换之后的字符",
				"$n 用第n个组替换"	
			]);
			
			public override function openFileHandler(files:Array):void
			{
				if (!files)
					return;
				
				var file:File = files[0] as File;
				var bytes:ByteArray = FileControl.readFile(file);
				this.sourceText.text = bytes.toString();
			}
			
			private function doExp():void
			{
				if (regExpText.text == "")
				{
					this.execText.text = "";
					return;
				}
				
				this.sourceText.validateNow();
				
				var params:String = (paramg.selected ? "g" : "") + 
					(parami.selected ? "i" : "") + 
					(paramx.selected ? "x" : "") + 
					(params.selected ? "s" : "") + 
					(paramm.selected ? "m" : "");
				var regExp:RegExp = new RegExp(regExpText.text,params);
				
				if (this.currentState == "replace")
					this.targetText.text = this.sourceText.text.replace(regExp,this.replaceText.text);
				
				this.sourceText.setTextColor();
				
				regExp.lastIndex = 0;
				var text:String = this.sourceText.text;
				do
				{
					var execResult:Object = regExp.exec(text);
					if (execResult)
					{
						var index:int = execResult.index;
						var len:int = execResult[0].length;
						if (len)
							this.sourceText.setTextColor(0xFF0000,index,index + len);
						else
							regExp.lastIndex++;
					}
				}
				while (execResult && regExp.global);
				
				this.execText.text = ""
				this.execText.appendText("表达式写法：/" + regExp.source.replace(/\//g,"\\/") + "/" + params +"\n" +
					"字符串写法：new RegExp(\"" + regExp.source.replace(/\"|\\/g,"\\$&") + "\",\""+ params +"\")\n\n");
				
				TextControl.setTextAreaDefaultFromat(this.execText,{color:0x0000FF,backgroundColor:0xCCCCFF});
				
				var result:Array = regExp.exec(this.sourceText.text);
				if (result)
				{
					this.execText.appendText("匹配了" + result.length + "个组：");
					for (var i:int = 0;i < result.length;i++)
					{
						this.execText.appendText("\n(" + (i + 1).toString() + ")" + result[i]);
					}
				}
			}
			
			
			
			protected function helpList_doubleClickHandler(e:Event):void
			{
				var mark:String = helpList.selectedItem.toString().split(" ")[0];
				if (mark.charAt(0) == "$" && mark.length > 1)
				{
					if (replaceText)
					{
						replaceText.insertText(mark);
					}
				}
				else
				{
					regExpText.insertText(mark);
				}
				doExp();
			}
			
			protected function regExp_changeHandler(event:Event):void
			{
				doExp();
			}

			protected function tabbar1_changeHandler(event:IndexChangeEvent):void
			{
				this.currentState = event.newIndex == 1 ? "replace" : "match";
				setTimeout(doExp,100);
			}


			protected function gctoolwindow1_creationCompleteHandler(event:FlexEvent):void
			{
				var v:Object = sharedObject.getValue()
				if (v)
				{
					regExpText.text = v.regExpText;
					sourceText.text = v.sourceText;
					replaceText.text = v.replaceText;
					paramg.selected = v.paramg;
					parami.selected = v.parami;
					paramx.selected = v.paramx;
					params.selected = v.params;
					paramm.selected = v.paramm;
				}
				
				regExpText.setFocus();
				doExp();
			}


			protected function gctoolwindow1_closeHandler(event:Event):void
			{
				sharedObject.setValue({
					regExpText:regExpText.text,
					sourceText:sourceText.text,
					replaceText:replaceText.text,
					paramg:paramg.selected,
					parami:parami.selected,
					paramx:paramx.selected,
					params:params.selected,
					paramm:paramm.selected
				})
			}

		]]>
	</fx:Script>
	<components:states>
		<s:State name="match"/>
		<s:State name="replace"/>
	</components:states>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:TabBar x="10" y="7" selectedIndex.match="0" selectedIndex.replace="1"
			  change="tabbar1_changeHandler(event)">
		<s:ArrayList>
			<fx:String>匹配</fx:String>
			<fx:String>替换</fx:String>
		</s:ArrayList>
	</s:TabBar>
	<s:BorderContainer left="10" right="10" top="30" bottom="10">
		<s:TextInput id="regExpText" left="10" right="178" top="10" text="\d"
					 change="regExp_changeHandler(event)"/>
		<s:TextInput id="replaceText" left="10" right="178" top="69" text="用于替换的文本"
					 change="regExp_changeHandler(event)"/>
		<s:CheckBox id="paramg" x="10" y="40" width="85" label="多次匹配" toolTip="参数：g" change="regExp_changeHandler(event)"/>
		<s:CheckBox id="parami" x="84" y="40" label="忽略大小写" toolTip="参数：i" change="regExp_changeHandler(event)"/>
		<s:CheckBox id="paramx" x="172" y="40" label="忽略空格" toolTip="参数：x" change="regExp_changeHandler(event)"/>
		<s:CheckBox id="params" x="250" y="40" label=".可跨行" toolTip="参数：s" change="regExp_changeHandler(event)"/>
		<s:CheckBox id="paramm" x="328" y="40" label="$^不跨行" toolTip="参数：m" change="regExp_changeHandler(event)"/>
		<s:List id="helpList" right="10" top="10" bottom="10" width="159" dataProvider="{helpDatas}" doubleClickEnabled="true" doubleClick="helpList_doubleClickHandler(event)"/>
		<components:CodeTextArea id="sourceText" left="10" right="178" top="69" bottom="210" text="这是1段测试文本" change="regExp_changeHandler(event)"
					left.match="10" right.match="178" top.match="69" bottom.match="100"
					left.replace="10" right.replace="178" top.replace="99" bottom.replace="210"/>
		<s:TextArea id="targetText" includeIn="replace" left="10" right="178" bottom="101" 
					height="101" editable="false"/>
		<s:TextArea id="execText" left="10" right="178" bottom="10" height="82" editable="false"/>
	</s:BorderContainer>
</components:GCToolWindow>
