<?xml version="1.0" encoding="utf-8"?>
<components:GCToolWindow xmlns:fx="http://ns.adobe.com/mxml/2009" enabledDragOpen="false"
						 xmlns:s="library://ns.adobe.com/flex/spark" showStatusBar="false" title="多语言对比"
						 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="ghostcattools.components.*" width="675" height="564" creationComplete="gctoolwindow1_creationCompleteHandler(event)" close="gctoolwindow1_closeHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import ghostcat.fileformat.csv.CSV;
			import ghostcat.manager.LanguageManager;
			import ghostcat.util.data.LocalStorage;
			import ghostcat.util.text.TextUtil;
			
			import ghostcattools.components.RenameTitleWindow;
			import ghostcattools.util.AutoLengthArrayList;
			import ghostcattools.util.Config;
			import ghostcattools.util.FileControl;
			import ghostcattools.util.ValueObject;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.utils.ObjectProxy;
			
			import spark.components.List;
			import spark.components.gridClasses.CellPosition;
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			
			private var so:LocalStorage = new LocalStorage("gctools_localeeditor");
			
			[Bindable]
			public var fileList:AutoLengthArrayList = new AutoLengthArrayList(null,ValueObject,"value");
			
			[Bindable]
			public var dataList:ArrayList;
			
			[Bindable]
			public var columnList:ArrayList;
			
			private var resource:Object = {};
			private var keyList:Array;
			
			private var searchText:String = "";
			
			private function doWithText(text:String,index:int):void
			{
				resource[index] = {};
				
				//消除文件头
				if (text.charCodeAt(0) == 65279)
					text = text.slice(1);
				
				var texts:Array = text.split(/\r?\n/);
				var key:String; 
				for (var i:int=0;i < texts.length;i++)
				{
					var textLine:String = texts[i] as String;
					if (textLine && textLine.substr(0,2)!="//")
					{
						if (/^\S+=.*/.test(textLine))
						{
							var pos:int = textLine.indexOf("=");
							
							key = textLine.slice(0,pos);
							if (keyList.indexOf(key) == -1)
								keyList.push(key);
							
							var value:String = textLine.slice(pos + 1);
							resource[index][key] = value;
						}
						else if (key && textLine.length > 0)
						{
							resource[index][key] += "\n" + textLine;//没有=则是上一行的继续
						}
					}
					else
					{
						if (index == 0)
							keyList.push(textLine);
					}
				}
			}
			
			private function loadFiles():void
			{
				this.keyList = [];
				this.resource = {};
				var list:Array = getFileList();
				for (var i:int = 0;i < list.length;i++)
				{
					var filePath:String = list[i];
					var bytes:ByteArray = FileControl.readFile(new File(filePath));
					doWithText(bytes.toString(),i);
				}
				
				var dataList:ArrayList = new ArrayList();
				for each (var key:String in this.keyList)
				{
					var o:Object = {};
					if (!key || key.slice(0,2)=="//")
					{
						o.isComment = true;
						for (i = 0;i < list.length;i++)
							o[i + 1] = key;
					}
					else
					{
						o[0] = key;
						for (i = 0;i < list.length;i++)
							o[i + 1] = resource[i][key];
					}
					dataList.addItem(new ObjectProxy(o));
				}
				this.resource = null;
				this.keyList = null;
				
				var columnList:ArrayList = new ArrayList();
				var column:GridColumn = new GridColumn();
				column.width = 150;
				column.dataField = "0";
				column.headerText = "名称";
				columnList.addItem(column);
				for (i = 0;i < list.length;i++)
				{
					column = new GridColumn();
					column.dataField = (i + 1).toString();
					column.headerText = list[i];
					columnList.addItem(column);
				}
				
				this.columnList = columnList;
				this.dataList = dataList;
			}
			
			private function saveFiles():void
			{
				var texts:Array = [];
				for (var i:int = 0;i < this.dataGrid.columns.length - 1;i++)
					texts[i] = "";
				
				for each (var child:Object in this.dataList.source)
				{
					var head:String = child[0] ?  child[0] : "";
					head = TextUtil.removeBR(head,false);
					for (i = 0;i < this.dataGrid.columns.length - 1;i++)
					{
						if (!child.isComment && head)
							texts[i] += head + "=";
						
						var body:String = child[i + 1] ? child[i + 1] : "";
						body = TextUtil.turnToRN(body);
						texts[i] += body + "\r\n";
					}
				}
				
				for (i = 0;i < this.dataGrid.columns.length - 1;i++)
				{
					var file:File = new File(GridColumn(this.dataGrid.columns.getItemAt(i + 1)).headerText);
					var bytes:ByteArray = new ByteArray();
					bytes.writeUTFBytes(texts[i]);
					
					FileControl.writeFile(file,bytes);
				}
			}
			
			private function findText(str:String):void
			{
				var selectedCell:CellPosition = dataGrid.selectedCell
				var startRow:int = selectedCell ? selectedCell.rowIndex : 0;
				
				dataGrid.selectedCell = null;
				
				for (var i:int = startRow;i < this.dataList.length;i++)
				{
					var o:Object = this.dataList.getItemAt(i);
					for (var p:String in o)
					{
						var v:String = o[p];
						if (!str && !v || v && v.indexOf(str) != -1)
						{
							var cellPosition:CellPosition = new CellPosition(i,int(p))
							if (!selectedCell || cellPosition.rowIndex > selectedCell.rowIndex || cellPosition.rowIndex == selectedCell.rowIndex && cellPosition.columnIndex > selectedCell.columnIndex)
							{
								dataGrid.selectedCell = cellPosition;
								dataGrid.ensureCellIsVisible(cellPosition.rowIndex,cellPosition.columnIndex);
								return;
							}
						}
					}
				}
			}
			
			private function getFileName(path:String):String
			{
				var index:int = path.lastIndexOf("/");
				return index == -1 ? path : path.slice(index + 1)
			}
			
			private function getFileList():Array
			{
				var list:Array = [];
				for each (var child:ValueObject in fileList.toArrayWithoutEmpty())
					list.push(child.value);
				return list;
			}
			
			private function setFileList(list:Array):void
			{
				fileList.removeAll();
				for each (var child:String in list)
					fileList.addItem(new ValueObject(child));
				fileList.createEmptyObject();
			}
			
			private function saveToShareObject():void
			{
				so.setValue(getFileList());
			}
			
			public override function openFileHandler(files:Array):void
			{
				var file:File = files[0] as File;
				var list:Array = FileControl.readFile(file).toString().split(/\r?\n/);
				this.setFileList(list);
			}
			
			private function openXLSHandler(files:Array):void
			{
				var file:File = files[0] as File;
				var bytes:ByteArray = FileControl.readFile(file);
				bytes.position = 0;
				
				var list:ArrayList = new ArrayList();
				if (file.extension == "xls")
				{
					var xls:ExcelFile = new ExcelFile();
					xls.loadFromByteArray(bytes);
					var sheet:Sheet = xls.sheets[0];
					
					for (var i:int = 0;i < sheet.rows;i++)
					{
						var o:ObjectProxy = new ObjectProxy();
						for (var j:int = 0;j < sheet.cols;j++)
							o[j] = sheet.getCell(i,j).value;
						list.addItem(o);
					}
				}
				else if (file.extension == "csv")
				{
					var csv:String = bytes.readMultiByte(bytes.bytesAvailable,Config.CHARSET);
					var data:Array = CSV.decode(csv);
					for (i = 0;i < data.length;i++)
					{
						o = new ObjectProxy();
						var line:Array = data[i] as Array;
						for (j = 0;j < line.length;j++)
							o[j] = line[j];
						list.addItem(o);
					}
				}
				this.dataList = list;
			}
			
			private function getXLSData():ByteArray
			{
				var sheet:Sheet = new Sheet();
				sheet.resize(this.dataList.length,this.dataGrid.columns.length);
				for (var i:int = 0;i < sheet.rows;i++)
				{
					var o:ObjectProxy = this.dataList.getItemAt(i) as ObjectProxy;
					for (var j:int = 0;j < sheet.cols;j++)
					{
						var value:String = o[j];
						if (!value || value == " ")
							value = "";
						sheet.setCell(i,j,value);
					}
				}
				var xls:ExcelFile = new ExcelFile();
				xls.sheets.addItem(sheet);
				return xls.saveToByteArray();
			}
			
			private function getCSVData():ByteArray
			{
				var data:Array = [];
				for (var i:int = 0;i < this.dataList.length;i++)
				{
					var o:ObjectProxy = this.dataList.getItemAt(i) as ObjectProxy;
					var line:Array = [];
					for (var j:int = 0;j < this.dataGrid.columns.length;j++)
					{
						var value:String = o[j];
						if (!value || value == " ")
							value = "";
						line.push(value);
					}
					data.push(line);
				}
				var bytes:ByteArray = new ByteArray();
				bytes.writeMultiByte(CSV.encode(data),Config.CHARSET)
				return bytes;
			}
			
			protected function gctoolwindow1_creationCompleteHandler(event:FlexEvent):void
			{
				FileControl.dragFileIn(openFileHandler,this.inBN);
				FileControl.dragFileIn(openXLSHandler,this.loadXLSBN,["xls","csv"]);
				
				var list:Array = so.getValue();
				if (list && !isDragOpen)
					setFileList(list);
			}


			protected function gctoolwindow1_closeHandler(event:Event):void
			{
				saveToShareObject();
			}


			protected function editBN_clickHandler(event:MouseEvent):void
			{
				saveToShareObject();
				loadFiles();
				
				this.tabNav.selectedIndex = 1;
			}

			protected function saveBN_clickHandler(event:MouseEvent):void
			{
				saveFiles();
			}


			protected function outBN_clickHandler(event:MouseEvent):void
			{
				var list:Array = getFileList();
				if (!list)
					return;
				
				var fileName:String = getFileName(list[0]);
				FileControl.browseForSave(saveFileHandler,"保存配置",fileName.split(".")[0] + ".txt");
				
				function saveFileHandler(files:Array):void
				{
					var file:File = files[0] as File;
					var bytes:ByteArray = new ByteArray();
					bytes.writeUTFBytes(list.join("\r\n"));
					FileControl.writeFile(file,bytes);
				}
			}
			
			
			protected function inBN_clickHandler(event:MouseEvent):void
			{
				FileControl.browseForOpen(openFileHandler,"选择一个文本文件",[new FileFilter("文本文件","*.txt")])
			}
			
			
			protected function outBN_mouseDownHandler(event:MouseEvent):void
			{
				var list:Array = getFileList();
				if (!list)
					return;
				
				var fileName:String = getFileName(list[0]);
				FileControl.dragTextFileOut(this.outBN,list.join("\r\n"),fileName.split(".")[0] + ".txt")
			}


			protected function findBN_clickHandler(event:MouseEvent):void
			{
				var win:RenameTitleWindow = new RenameTitleWindow();
				win.title = "查询";
				win.text = searchText;
				win.show(this);
				win.renameHandler = function (str:String):void
				{
					findText(str);
					searchText = str;
				}
			}
			
			protected function findNextBN_clickHandler(event:MouseEvent):void
			{
				findText(searchText);
			}

			protected function findSpaceBN_clickHandler(event:MouseEvent):void
			{
				findText(null);
			}

			protected function addRowBN_clickHandler(event:MouseEvent):void
			{
				var o:ObjectProxy = new ObjectProxy();
				o[0] = "";
				for (var i:int = 0;i < this.dataGrid.columns.length - 1;i++)
					o[i + 1] = "";
				
				if (dataGrid.selectedCell)
					dataList.addItemAt(o,dataGrid.selectedCell.rowIndex + 1)
				else
					dataList.addItem(o);
			}


			protected function delRowBN_clickHandler(event:MouseEvent):void
			{
				if (dataGrid.selectedCell)
				{
					var oldSelect:CellPosition = dataGrid.selectedCell;
					dataList.removeItemAt(dataGrid.selectedCell.rowIndex);
					dataGrid.selectedCell = oldSelect;
				}
			}

			protected function loadXLSBN_clickHandler(event:MouseEvent):void
			{
				FileControl.browseForOpen(openXLSHandler,"打开一个Excel文件",[new FileFilter("Excel 文档","*.xls;*.csv")]);
			}

			protected function saveXLSBN_clickHandler(event:MouseEvent):void
			{
				var fileName:String = getFileName(getFileList()[0]);
				FileControl.browseForSave(rHandler,"保存为XLS文件",fileName.split(".")[0] + ".xls");
				function rHandler(files:Array):void
				{
					var file:File = files[0] as File;
					FileControl.writeFile(file,getXLSData());
					file.openWithDefaultApplication();
				}
				
			}

			protected function saveXLSBN_mouseDownHandler(event:MouseEvent):void
			{
				var fileName:String = getFileName(getFileList()[0]);
				FileControl.dragTextFileOut(this.saveXLSBN,getXLSData,fileName.split(".")[0] + ".xls")
			}
			
			protected function saveCSVBN_clickHandler(event:MouseEvent):void
			{
				var fileName:String = getFileName(getFileList()[0]);
				FileControl.browseForSave(rHandler,"保存为CSV文件",fileName.split(".")[0] + ".csv");
				function rHandler(files:Array):void
				{
					var file:File = files[0] as File;
					FileControl.writeFile(file,getCSVData());
					file.openWithDefaultApplication();
				}
				
			}
			
			protected function saveCSVBN_mouseDownHandler(event:MouseEvent):void
			{
				var fileName:String = getFileName(getFileList()[0]);
				FileControl.dragTextFileOut(this.saveCSVBN,getXLSData,fileName.split(".")[0] + ".csv")
			}

			protected function dataGrid_gridClickHandler(event:GridEvent):void
			{
				if (event.rowIndex == -1)
				{
					if (event.columnIndex > 0)
					{
						var file:File = new File(event.column.headerText);
						FileControl.runNotePad(file.nativePath);
					}
				}
				else
				{
					if (!dataGrid.itemEditorInstance)
						dataGrid.startItemEditorSession(event.rowIndex,event.columnIndex);
				}
			}
		]]>
	</fx:Script>
	<mx:TabNavigator id="tabNav" left="5" right="5" top="5" bottom="5" paddingTop="0" creationPolicy="all">
		<s:NavigatorContent width="100%" height="100%" label="选择文件">
			<s:Label x="8" y="10" text="请在下面选择需要对比编辑的文件"/>
			<s:Button id="editBN" y="5" right="5" width="115" label="加载文件" chromeColor="#C6E2FF"
					  click="editBN_clickHandler(event)"/>
			<s:Scroller left="5" right="5" top="30" bottom="5">
				<s:DataGroup dataProvider="{fileList}" width="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:itemRenderer>
						<fx:Component>
							<s:DataRenderer width="100%">
								<s:TextInput id="libInput" y="3" left="3" right="32" text="@{data.value}"/>
								<components:BrowseButton y="3" right="3" target="{libInput}"/>
							</s:DataRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:DataGroup>	
			</s:Scroller>
			<s:Button id="inBN" y="5" right="194" label="导入配置" click="inBN_clickHandler(event)"/>
			<s:Button id="outBN" y="5" right="122" label="导出配置" click="outBN_clickHandler(event)"
					  mouseDown="outBN_mouseDownHandler(event)"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="编辑文件">
			<s:Group width="100%" height="100%" enabled="{dataList}">
				<s:Button id="findSpaceBN" x="5" y="5" label="查找空白行" click="findSpaceBN_clickHandler(event)"/>
				<s:Button id="findBN" x="88" y="5" label="查找文本" click="findBN_clickHandler(event)"/>
				<s:Button id="findNextBN" x="161" y="5" label="查找下一个" click="findNextBN_clickHandler(event)"/>
				<s:Button id="saveXLSBN" y="5" right="200" label="保存为XLS"
						  click="saveXLSBN_clickHandler(event)"
						  mouseDown="saveXLSBN_mouseDownHandler(event)"/>
				<s:Button id="saveCSVBN" y="5" right="123" label="保存为CSV"
						  click="saveCSVBN_clickHandler(event)"
						  mouseDown="saveCSVBN_mouseDownHandler(event)"/>
				<s:Button id="loadXLSBN" y="29" right="123" width="151" label="从Excel导入"
						  click="loadXLSBN_clickHandler(event)"/>
				<s:Button id="addRowBN" x="5" y="29" width="58" label="增加行" click="addRowBN_clickHandler(event)"/>
				<s:Button id="delRowBN" x="66" y="29" width="58" label="删除行" click="delRowBN_clickHandler(event)"/>
				<s:Label x="132" y="34" text="点击表头可打开文件"/>
				<s:Button id="saveBN" right="5" top="5" width="115" height="45" label="全部保存"
						  chromeColor="#C6E2FF" click="saveBN_clickHandler(event)"/>
				<s:DataGrid id="dataGrid" left="5" right="5" top="54" bottom="5" editable="true" dataProvider="{dataList}" 
							columns="{columnList}" selectionMode="singleCell" variableRowHeight="true" 
							gridClick="dataGrid_gridClickHandler(event)">
					<s:itemRenderer>
						<fx:Component>
							<s:UITextFieldGridItemRenderer multiline="true"/>
						</fx:Component>
					</s:itemRenderer>
				</s:DataGrid>
			</s:Group>
		</s:NavigatorContent>
	</mx:TabNavigator>
</components:GCToolWindow>
