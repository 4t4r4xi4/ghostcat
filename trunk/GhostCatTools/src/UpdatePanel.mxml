<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" currentState="base"
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import ghostcat.util.data.LocalStorage;
			
			import ghostcattools.util.FileControl;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.components.mediaClasses.VolumeBar;
			
			
			public const UPDATE_URL:String = "http://ghostcat.googlecode.com/svn/trunk/GhostCatTools/version.xml"
			public const VERISON:String ="1.0.0";
			
			public var updateCheckSO:LocalStorage = new LocalStorage("gctools_updatepanel");
			
			[Bindable]
			public var loadPerent:Number;
			
			private var loader:URLLoader;
			
			public function check(warmError:Boolean = false):void
			{
				var loader:URLLoader = new URLLoader(new URLRequest(UPDATE_URL));
				loader.addEventListener(Event.COMPLETE,completeHandler);
				loader.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				
				function completeHandler(event:Event):void
				{
					var xml:XML = new XML(loader.data);
					var version:String = xml.@version;
					var url:String = xml.@url;
					
					var oldArr:Array = VERISON.split(".");
					var newArr:Array = version.split(".");
					var isNew:Boolean = false;
					for (var i:int = 0;i < oldArr.length;i++)
					{
						if (int(newArr[i]) > int(oldArr[i]))
						{
							isNew = true;
							break;
						}
					}
					
					if (isNew)
						Alert.show("当前最新版本为：" + version + "，是否现在更新？","检查更新",Alert.YES|Alert.NO,null,closeHandler);
					
					function closeHandler(event:CloseEvent):void
					{
						if (event.detail == Alert.YES)
							loadNewVersion(url,version);
					}
				}
				
				function ioErrorHandler(event:IOErrorEvent):void
				{
					if (warmError)
						Alert.show("检查更新失败！","错误")
				}
			}
			
			private function loadNewVersion(url:String,version:String):void
			{
				this.currentState = "loading";
				
				var file:File = File.applicationStorageDirectory.resolvePath("GhostCatTools_" + version.replace(/\./,"_") +".exe");
				if (file.exists)
				{
					loadPerent = 1.0;
					runUpdater(file);
					return;
				}
				
				this.loader = new URLLoader(new URLRequest(url));
				this.loader.dataFormat = URLLoaderDataFormat.BINARY;
				this.loader.addEventListener(Event.COMPLETE,completeHandler);
				this.loader.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
				this.loader.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				
				function progressHandler(event:ProgressEvent):void
				{
					loadPerent = event.bytesLoaded / event.bytesTotal;
				}
				
				function completeHandler(event:Event):void
				{
					loadPerent = 1.0;
					FileControl.writeFile(file,loader.data as ByteArray);
					runUpdater(file);
				}
				
				function ioErrorHandler(event:IOErrorEvent):void
				{
					currentState = "base";
					Alert.show("下载更新更新失败！","错误");
				}
			}
				
			private function runUpdater(file:File):void
			{
				Alert.show("更新文件下载成功，是否现在安装？","检查更新",Alert.YES|Alert.NO,null,closeHandler);
				
				function closeHandler(event:CloseEvent):void
				{
					if (event.detail == Alert.YES)
					{
						file.openWithDefaultApplication();
						GhostCatTools.instance.nativeApplication.exit();
					}
					else
					{
						currentState = "base";
					}
				}
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				var data:Date = updateCheckSO.getlastTime();
				if (!data || new Date().getTime() - data.getTime() > 6 * 24 * 3600 * 1000)
				{
					updateCheckSO.setValue(true);
					check();
				}
			}


			protected function label1_clickHandler(event:MouseEvent):void
			{
				check(true);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:HTTPService id="updateService" url="{UPDATE_URL}" resultFormat="e4x"/>
	</fx:Declarations>
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<s:states>
		<s:State name="base"/>
		<s:State name="loading"/>
	</s:states>
	<s:Label includeIn="base" text="检查更新" textDecoration="underline" color="#0000FF" buttonMode="true" click="label1_clickHandler(event)"/>
	<s:Label includeIn="loading" text="下载进度：{(loadPerent * 100).toFixed(1)}%" color="#0000FF" />
	<s:Label text="当前版本：{VERISON}"/>
</s:Group>
